version: '3.8'

services:
  # FastAPI 백엔드 애플리케이션
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - mysql
    env_file:
      - .env
    restart: always
    environment:
      - SQLALCHEMY_DATABASE_URL=mysql+pymysql://user:12345678@mysql:3306/matchup
      - JWT_SECRET_KEY=1234567890
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=3000
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=5
    networks:
      - app-network

  # MySQL 데이터베이스
  mysql:
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=matchup  # MySQL 루트 비밀번호를 여기에 입력해야 합니다.
      - MYSQL_DATABASE=matchup  # 데이터베이스 이름을 여기에 입력해야 합니다.
      - MYSQL_USER=user # MySQL 사용자를 여기에 입력해야 합니다.
      - MYSQL_PASSWORD=12345678 # MySQL 사용자의 비밀번호를 여기에 입력해야 합니다.
    volumes:
      - db_data:/var/lib/mysql  # MySQL 데이터베이스를 위한 가상 볼륨 설정
    networks:
      - app-network
      
  # 디비 조회용 GUI    
  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin
  #   links:
  #     - db:mysql
  #   ports:
  #     - "8001:80"
  #   environment:
  #     PMA_HOST: db
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #   networks:
  #     - app-network
  
  # 젠킨스
  # jenkins:
  #   image: jenkins/jenkins:latest
  #   container_name: jenkins
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - jenkins_home:/var/jenkins_home
  #   networks:
  #     - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:      
      - "6379:6379"
    networks:
      - app-network

  redis_insight:
    image: redislabs/redisinsight:latest
    container_name: redis_insight
    ports:
      - "5540:5540"
    restart: always
    networks:
      - app-network
  
  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80" # http
  #     - '443:443' # https
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/error.log:/etc/log/nginx/error.log
  #   container_name: nginx_proxy
  #   networks:
  #     - app-network
  #   depends_on:
  #     - backend

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  # jenkins_home:

